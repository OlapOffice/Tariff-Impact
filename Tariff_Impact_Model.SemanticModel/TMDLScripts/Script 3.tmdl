createOrReplace

	/// Fact table capturing transaction-level sales data including units sold, revenue, and cost.
	table Sales
		lineageTag: 96ee9c62-c713-4269-93b3-1b33a9eef605

		/// Total product cost including tariffs. Calculated as Units * BaseCost * TariffRate.
		measure 'Tariff Cost' = ```
			SUMX (
				Sales,
				Sales[Units Sold] *
				RELATED(Products[BaseCost]) *
				LOOKUPVALUE(
					Tariffs[TariffRate],
					Tariffs[Country],
					RELATED(Products[CountryOfOrigin])
				) 
				//* SELECTEDVALUE(Scenarios[TariffMultiplier], 1)
			)
			```

		/// Aggregated count of units sold. Primary metric for volume analysis.
		measure 'Total Units Sold' = SUM(Sales[Units Sold])

		/// Total revenue aggregated across all transactions.
		measure Revenue = SUM(Sales[OriginalRevenue])

		/// Total cost of goods sold aggregated across transactions.
		measure COGS = ```
			SUM(Sales[OriginalCOGS])
			```

		/// Gross margin before considering tariffs.
		measure 'Gross Margin' = ```
			[Revenue] - [COGS]
			```

		/// Percentage of revenue spent on tariffs.
		measure 'Tariff Pct Revenue' = ```
			DIVIDE([Tariff Cost], [Revenue])
			```

		/// Gross margin expressed as a percentage of revenue.
		measure 'Gross Margin Pct' = ```
			DIVIDE([Gross Margin], [Revenue])
			```

		/// Updated cost including tariffs.
		measure 'Tariff COGS' = [COGS] + [Tariff Cost]

		/// Margin after including tariffs in the cost calculation.
		measure 'Tariff Gross Margin' = [Revenue] - [Tariff COGS]

		/// Tariff-adjusted margin percentage.
		measure 'Tariff Gross Margin Pct' = DIVIDE([Tariff Gross Margin], [Revenue])

		/// Delta between tariff and base gross margin percentages.
		measure 'Tariff GM%' = IF ([Tariff Gross Margin Pct] - [Gross Margin Pct] <> 0, [Tariff Gross Margin Pct] - [Gross Margin Pct])

		/// Date of the sales transaction.
		column Date

		/// Foreign key linking sales to product SKU.
		column SKU

		/// Total units sold for the corresponding transaction line.
		column 'Units Sold'

		/// Raw revenue captured at the transaction level.
		column OriginalRevenue

		/// Raw cost of goods sold for the transaction line.
		column OriginalCOGS

		/// Full data import from Excel workbook for sales transactions.
		partition Sales = m
			mode: import
			dataView: full
			source =
				let
					Source = Excel.Workbook(File.Contents(FilePath), null, true),
					Sales_Sheet = Source{[Item="Sales",Kind="Sheet"]}[Data],
					#"Promoted Headers" = Table.PromoteHeaders(Sales_Sheet, [PromoteAllScalars=true]),
					#"Changed Type" = Table.TransformColumnTypes(#"Promoted Headers",{{"Date", type date}, {"SKU", type text}, {"UnitsSold", Int64.Type}, {"Revenue", Int64.Type}, {"COGS", Int64.Type}}),
					#"Renamed Columns" = Table.RenameColumns(#"Changed Type",{{"UnitsSold", "Units Sold"}, {"Revenue", "OriginalRevenue"}, {"COGS", "OriginalCOGS"}})
				in
					#"Renamed Columns"

		annotation PBI_ResultType = Table
		annotation PBI_NavigationStepName = Navigation
